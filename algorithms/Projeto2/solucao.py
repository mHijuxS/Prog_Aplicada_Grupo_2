# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProgramacaoAplicadaGrupo2
                                 A QGIS plugin
 Solução do Grupo 2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-20
        copyright            : (C) 2023 by Grupo 2
        email                : matheus.ferreira@ime.eb.br
                               leonardo.fernandes@ime.eb.br
                               daniel.nojima@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo 2'
__date__ = '2023-03-20'
__copyright__ = '(C) 2023 by Grupo 2'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'



import pandas as pd
import geopandas as gpd

from qgis import processing
from qgis.utils import iface
from PyQt5.QtCore import QVariant
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProject,
                       QgsProcessingUtils,
                       QgsVectorLayer,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterVectorLayer,
                       QgsCoordinateReferenceSystem,
                       QgsProcessingParameterRasterLayer,
                       QgsVectorFileWriter,
                       QgsCoordinateTransform,
                       QgsWkbTypes,
                       QgsGeometry,
                       QgsPointXY,
                       QgsFields,
                       QgsFeature,
                       QgsField,
                       QgsRaster,
                       QgsMarkerSymbol,
                       QgsCategorizedSymbolRenderer,
                       QgsRendererCategory,
                       QgsSymbol,
                       QgsProcessingParameterFeatureSink
                    )


class Projeto2Solucao(QgsProcessingAlgorithm):

    """
    Definindo as constantes
    """
    
    # INPUTS 
    INPUT_DRENAGENS = 'INPUT_DRENAGENS'
    INPUT_SINK_SPILL = 'INPUT_SINK_SPILL'
    INPUT_WATER_BODY = 'INPUT_WATER_BODY'
    INPUT_DITCH = 'INPUT_DITCH'

    # OUTPUTS
    POINT_FLAGS = 'POINT_FLAGS'
    LINE_FLAGS = 'LINE_FLAGS'
    POLYGON_FLAGS = 'POLYGON_FLAGS'

    def tr(self, string):
        return QCoreApplication.translate('Processando', string)

    def createInstance(self):
        return Projeto2Solucao()

    def name(self):
        return 'Solução do Projeto 2'

    def displayName(self):
        return self.tr(self.name())

    def group(self):        
        return self.tr(self.groupId())

    def groupId(self):
        return 'Projeto 2'
        
    def shortHelpString(self):
        return self.tr("""ESCREVER AQUI"""
                       )
    
    
    def initAlgorithm(self, config):

        # Camadas de Entrada.
        self.addParameter(QgsProcessingParameterVectorLayer(self.INPUT_DRENAGENS, 
                                                            'Drenagens',
                                                            types=[QgsProcessing.TypeVectorLine], 
                                                            defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer(self.INPUT_SINK_SPILL, 'Sumidouros e Vertedouros', 
                                                            types=[QgsProcessing.TypeVectorPoint], 
                                                            defaultValue=None))
        self.addParameter(QgsProcessingParameterVectorLayer(self.INPUT_DITCH, 'Canais', 
                                                            types=[QgsProcessing.TypeVectorLine], 
                                                            defaultValue=None))

        self.addParameter(QgsProcessingParameterVectorLayer(self.INPUT_WATER_BODY, 'Massa de Agua', 
                                                            types=[QgsProcessing.TypeVectorPolygon], 
                                                            defaultValue=None))
        
          # Camada de Saida.
        self.addParameter(QgsProcessingParameterFeatureSink(self.POINT_FLAGS, 'Erros pontuais', 
                                                            type=QgsProcessing.TypeVectorPoint, 
                                                            createByDefault=True, 
                                                            supportsAppend=True, 
                                                            defaultValue='TEMPORARY_OUTPUT'))
        self.addParameter(QgsProcessingParameterFeatureSink(self.LINE_FLAGS, 'Erros em linhas', 
                                                            type=QgsProcessing.TypeVectorLine, 
                                                            createByDefault=True, 
                                                            supportsAppend=True, 
                                                            defaultValue='TEMPORARY_OUTPUT'))
        self.addParameter(QgsProcessingParameterFeatureSink(self.POLYGON_FLAGS, 'Erros em polígonos', 
                                                            type=QgsProcessing.TypeVectorPolygon, 
                                                            createByDefault=True, 
                                                            supportsAppend=True, 
                                                            defaultValue='TEMPORARY_OUTPUT'))


  
      
    def processAlgorithm(self, parameters, context, feedback):


        return {self.OUTPUT_LAYER: dest_id}
    

 