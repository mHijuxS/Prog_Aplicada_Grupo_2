# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProgramacaoAplicadaGrupo2
                                 A QGIS plugin
 Solução do Grupo 2
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-20
        copyright            : (C) 2023 by Grupo 2
        email                : matheus.ferreira@ime.eb.br
                               leonardo.fernandes@ime.eb.br
                               daniel.nojima@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo 2'
__date__ = '2023-03-20'
__copyright__ = '(C) 2023 by Grupo 2'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterFeatureSink)

from qgis.core import (QgsProcessingAlgorithm, QgsProcessingParameterMultipleLayers, QgsProcessingParameterFeatureSink, QgsProcessing, QgsVectorLayer, QgsProject, QgsGeometry, QgsPointXY, QgsField, QgsFields, QgsFeature, QgsCoordinateReferenceSystem, QgsRaster)
from qgis.analysis import QgsNativeAlgorithms
from PyQt5.QtCore import QVariant
import processing

class Projeto1SolucaoComplementar(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    INPUT_LAYERS = 'INPUT_LAYERS'
    OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config):
        # Adicione os parâmetros do CalculateIntersectionBbox
        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                self.INPUT_LAYERS,
                self.tr('Input Raster Layers'),
                QgsProcessing.TypeRaster
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output Layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        # criando a saida agrupada
        group_name = "Saida Agrupada"
        layer_tree_root = QgsProject.instance().layerTreeRoot()
        output_group = layer_tree_root.findGroup(group_name)
        if output_group is None:
            output_group = layer_tree_root.addGroup(group_name)

        layers = self.parameterAsLayerList(parameters, self.INPUT_LAYERS, context)

        # Código de processamento de layers aqui (o mesmo que no CalculateIntersectionBbox)
        # Your code for processing layers should be placed here.
        list = []
        project = QgsProject.instance()
        for layer in layers:
            rect = layer.extent()

            polygon_geom = QgsGeometry.fromPolygonXY([[QgsPointXY(rect.xMinimum(),  rect.yMinimum()),
                                                        QgsPointXY(rect.xMinimum(), rect.yMaximum()),
                                                        QgsPointXY(rect.xMaximum(), rect.yMaximum()),
                                                        QgsPointXY(rect.xMaximum(), rect.yMinimum()),
                                                        QgsPointXY(rect.xMinimum(), rect.yMinimum())]]
                                                        )
            new_layer = QgsVectorLayer("Polygon",f"{layer.name()}_BBox",'memory')
            new_layer.setCrs(layer.crs())

            fields = QgsFields()
            fields.append(QgsField('raster',QVariant.String))

            provider = new_layer.dataProvider()
            provider.addAttributes(fields)

            nome = layer.name()
            feature = QgsFeature(new_layer.fields())
            feature.setGeometry(polygon_geom)
            feature.setAttributes([nome])
            provider.addFeature(feature)

            new_layer.updateFields()
            list.append(new_layer)

        list2 = list.copy()
        list3 = []
        project = QgsProject().instance()
        for layer1 in list:
            list2.remove(layer1)
            for layer2 in list2:
                result = processing.run("qgis:intersection", {
                'INPUT': layer1,
                'OVERLAY': layer2,
                'OUTPUT': 'memory:'
               })
                intersect_layer = result['OUTPUT']
                if not intersect_layer.featureCount()==0:
                    list3.append(intersect_layer)

        result = []
        for layer in list3:
            extent = layer.extent()

            resultado = processing.run("native:creategrid", {'TYPE':0,
            'EXTENT':extent,
            'HSPACING':200,
            'VSPACING':200,
            'HOVERLAY':0,
            'VOVERLAY':0,
            'CRS':QgsCoordinateReferenceSystem('EPSG:31982'),
            'OUTPUT':'TEMPORARY_OUTPUT'})

            result.append(resultado['OUTPUT'])

        layer_cnt = 0
        for intersect in list3:
            new_field = QgsField('Eqz',QVariant.Double)
            intersect_provider = intersect.dataProvider()
            intersect_provider.addAttributes([new_field])
            intersect.updateFields()
            erro = 0
            counter = 0
            layer_cnt = layer_cnt + 1
            intersect.startEditing()
            for feat in intersect.getFeatures():
                raster1 = project.mapLayersByName(feat.attributes()[0])[0]
                raster2 = project.mapLayersByName(feat.attributes()[1])[0]
                provider1 = raster1.dataProvider()
                provider2 = raster2.dataProvider()
                for layer_point in result:
                    for point_feat in layer_point.getFeatures():
                        if intersect.extent().contains(point_feat.geometry().boundingBox()):
                            geom = point_feat.geometry()
                            x,y = geom.asPoint()
                            point = QgsPointXY(x,y)
                            pixel_value1 = provider1.identify(point,QgsRaster.IdentifyFormatValue).results()[1]
                            pixel_value2 = provider2.identify(point,QgsRaster.IdentifyFormatValue).results()[1]
                            erro = abs(pixel_value1 - pixel_value2)
                            erro = erro + erro**2
                            counter = counter + 1
                EMQz = (erro/counter)**1/2
                feat[2] = EMQz
                intersect.updateFeature(feat)
            intersect.commitChanges()
            temp = intersect
            
            temp.setName(f"{feat.attributes()[0]}_{feat.attributes()[1]}")
            layer_tree_layer = project.addMapLayer(temp, False)
            output_group.addLayer(temp)
        
        # The current implementation does not process layers and will return an empty layer.
        
        # Create an empty memory layer as output
        output_layer = temp

        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context, output_layer.fields(), output_layer.wkbType(), output_layer.sourceCrs())

        return {self.OUTPUT: dest_id}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Solução Complementar do Projeto 1'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Projeto 1'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Projeto1SolucaoComplementar()
    
    
    