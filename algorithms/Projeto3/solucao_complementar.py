# -*- coding: utf-8 -*-

"""
/***************************************************************************
 ProgramacaoAplicadaGrupo4
                                 A QGIS plugin
 Solução do Grupo 4
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-04
        copyright            : (C) 2023 by Grupo 4
        emails               : e.tadeu.eb@ime.eb.br
                               raulmagno@ime.eb.br
                               arthur.cavalcante@ime.eb.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Grupo 4'
__date__ = '2023-20-05'
__copyright__ = '(C) 2023 by Grupo 4'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
from qgis.utils import iface
import processing
from qgis.PyQt.QtCore import QCoreApplication
from qgis.analysis import QgsNativeAlgorithms
from PyQt5.QtCore import QVariant
from qgis.core import ( QgsGeometry,
                        QgsProcessing,
                        QgsProcessingAlgorithm,
                        QgsProcessingParameterVectorLayer,
                        )


class Projeto3SolucaoComplementar(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    EDIFICACOES = 'EDIFICACOES'
    RODOVIAS = 'RODOVIAS'
    # OUTPUT = 'OUTPUT'

    def initAlgorithm(self, config=None):
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.EDIFICACOES,
                'Insira Camada Edificação',
                [QgsProcessing.TypeVectorPoint]))

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.RODOVIAS,
                'Insira Camada de Rodovia',
                [QgsProcessing.TypeVectorLine]))

        # self.addParameter(
        #     QgsProcessingParameterFeatureSink(
        #         self.OUTPUT,
        #         'Solucao Complementar'))

    def processAlgorithm(self, parameters, context, feedback):
        buildings = self.parameterAsVectorLayer(parameters, self.EDIFICACOES, context)
        roads = self.parameterAsVectorLayer(parameters, self.RODOVIAS, context)

        # Coleta o indice do atributo rotacao
        fni = buildings.fields().indexFromName('rotacao')

        att_map = {}

        # Iterar sobre todos os edificios
        for building in buildings.getFeatures():
            # Achar a feição mais proxima da edificação no for
            nearest_points = [f.geometry().nearestPoint(building.geometry()) for f in roads.getFeatures()]
            closest = [QgsGeometry.collectGeometry(nearest_points).nearestPoint(building.geometry())][0]
            closest_feature = [f for f in roads.getFeatures() if f.geometry().intersects(closest.buffer(0.001, 8))][0]
            # Acha o segmento de linha mais proxima da edificação
            idx = closest_feature.geometry().closestSegmentWithContext(building.geometry().asPoint())[2]
            # Coleta o azimute da linha com vertices antes e depois do segmento mais proximo
            azimuth = closest_feature.geometry().vertexAt(idx).azimuth(closest_feature.geometry().vertexAt(idx-1))
            # Cria um mapa de atributes da id da feição, indice do atributo e o valor do azimute
            att_map[building.id()] = {fni: azimuth}

        # Atualiza os valores dos atributos na coluna rotacao
        buildings.dataProvider().changeAttributeValues(att_map) 
        
        
        
        self.configureOutputLayerStyle(buildings,context,feedback)
        return {}
        
    def configureOutputLayerStyle(self, output_dest_id, context, feedback):
        atual_dir = os.path.dirname(__file__)
        estilo = os.path.join(atual_dir, 'edificacoes.qml')
        alg_params = {
            'INPUT': output_dest_id,
            'STYLE': estilo
        }
        processing.run('native:setlayerstyle', alg_params, context=context, feedback=feedback, is_child_algorithm=True)        

        


    def name(self):
        return 'Solução Complementar do Projeto 3'

    def displayName(self):
        return self.tr(self.name())

    def group(self):
        return self.tr(self.groupId())

    def groupId(self):
        return 'Projeto 3'

    def shortHelpString(self):
        return self.tr("""
                          """
                       )
    
    def tr(self, string):
        return QCoreApplication.translate('Processando', string)

    def createInstance(self):
        return Projeto3SolucaoComplementar()