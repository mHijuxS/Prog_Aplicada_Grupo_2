# -*- coding: utf-8 -*-

"""
/***************************************************************************
 DeslocamentoEdificacoes
                                 A QGIS plugin
 Movendo edificacoes fora das rodovias
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-03-20
        copyright            : (C) 2023 by OpenAI
        email                : openai@example.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'OpenAI'
__date__ = '2023-03-20'
__copyright__ = '(C) 2023 by OpenAI'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing, 
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterDistance,
                       QgsProcessingParameterFeatureSink,
                       QgsFeature,
                       QgsVectorLayer,
                       QgsGeometry,
                       QgsFeatureSink
                       )

class DeslocamentoEdificacoes(QgsProcessingAlgorithm):

    INPUT_EDIFICACOES = 'INPUT_EDIFICACOES'
    INPUT_RODOVIAS = 'INPUT_RODOVIAS'
    DISTANCIA = 'DISTANCIA'
    OUTPUT = 'OUTPUT'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DeslocamentoEdificacoes()

    def name(self):
        return 'deslocamento_edificacoes'

    def displayName(self):
        return self.tr('Deslocamento de Edificações')

    def group(self):
        return self.tr('Exemplos')

    def groupId(self):
        return 'exemplos'

    def shortHelpString(self):
        return self.tr("O algoritmo move as edificações para a lateral da rodovia, caso a edificação esteja em cima da rodovia")

    def initAlgorithm(self, config=None):
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT_EDIFICACOES,
                self.tr('Camada de Edificações'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT_RODOVIAS,
                self.tr('Camada de Rodovias'),
                [QgsProcessing.TypeVectorLine]
            )
        )

        self.addParameter(
            QgsProcessingParameterDistance(
                self.DISTANCIA,
                self.tr('Distância de deslocamento'),
                parentParameterName=self.INPUT_EDIFICACOES,
                minValue=0,
                defaultValue=10
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Edificações Deslocadas')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        edificacoes_layer = self.parameterAsVectorLayer(parameters, self.INPUT_EDIFICACOES, context)
        rodovias_layer = self.parameterAsVectorLayer(parameters, self.INPUT_RODOVIAS, context)
        distancia = self.parameterAsDouble(parameters, self.DISTANCIA, context)

        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT, context,
                                               edificacoes_layer.fields(),
                                               edificacoes_layer.wkbType(),
                                               edificacoes_layer.sourceCrs())

        for edificacao in edificacoes_layer.getFeatures():
            for rodovia in rodovias_layer.getFeatures():
                if edificacao.geometry().intersects(rodovia.geometry()):
                    new_geom = edificacao.geometry().translate(-distancia, -distancia)
                    new_feature = QgsFeature(edificacao)
                    new_feature.setGeometry(new_geom)
                    sink.addFeature(new_feature, QgsFeatureSink.FastInsert)
                else:
                    sink.addFeature(edificacao, QgsFeatureSink.FastInsert)

        return {self.OUTPUT: dest_id}
